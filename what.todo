Administration:
    ☐ User Account Creator @created(20-08-12 02:50)
        We currently have something like that located within the "hdofajw" folder under "api". There will come a time where this will have to be streamlined.
    ☐ Password Reset Tool @created(20-08-12 02:50)
        Probably wrapped under a general Courseadvysr adminstration tool, handling user accounts.

API:
    
    https://github.com/jumarmartin/courseadvysr-api
    ✔ Setup Webservers @created(20-07-31 20:32) @done(20-08-11 11:53)

        Note that we have to set up SSL and auth before pushing it live, but as a test we won't. 

        ✔ Setup api.courseadvysr courseadvysr.com on Digital Ocean @1h @created(20-07-31 19:40) @done(20-07-31 20:28)
            We're using Digital Ocean because it's pretty easy to compose then decompose and we're just used to it.

            We have api.courseavysr and courseadvysr.com pointing towards the server but it's showing the splash page for nginx for the latter and 404 not found for the former. The 404 not found is better than nothing as it at least is showing that something should be pointing there.

            This is enlightening: https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04

        ✔ Setup api.courseadvysr.com for use as an actual API server @created(20-07-31 20:28) @done(20-07-31 21:00)
            We don't have to add the requisite authentication, just be able to provide responses through the API server, we can lift the authentication methods from bondkeepr -- (PASTETO, PSQL)

            maybe don't even host HTML off of this particular server block.

            enlightening: https://www.digitalocean.com/community/tutorials/how-to-deploy-a-go-web-application-using-nginx-on-ubuntu-18-04

            Do we push just the binary there or do we push binary + code? I think just binary.
        
            When setting up servers for golang deployments, use https://github.com/moovweb/gvm.
            
            also, use the -B flag ("binary install) instead of the default which is to compile golang from source which will error. ex: "gvm install go1.14.6 -B"

        ✔ Setup psql server @created(20-07-31 21:00) @done(20-07-31 21:29)
            Import the .sql file (that isn't on github so we'll find some way to transfer this, probably through ssh but fssh or sshf or something like that or _even_ rsync through ssh or vice versa)

            postgresql (as well as go versions, etc.) on ubuntu instances are woefully outdated.

            
        - There is an issue with assuming 127.0.0.1 wrt postgresql and lib/pq, have to use the connection url to use it with lib/pq. Will have to firewall it away from the internet and only available to localhost.
            relevant: https://stackoverflow.com/questions/57696882/docker-golang-lib-pq-dial-tcp-127-0-0-15432-connect-connection-refused

            I was really stupid last night and it seems as if I didn't think to capture the err and see what was going on. I knew it was with the connStr but I wasn't as clearheaded as I am this morning.

            UPDATE: 2020-08-01 08:55, the server was listening on port 5433 not 5432... why?

        ✔ Setup NodeJS server for Frontend @created(20-08-01 08:47) @done(20-08-11 12:09)

            So, node is o-o-d and we are using a version manager, nvm. located here: https://github.com/nvm-sh/nvm
            
            Now we just have to serve and run on courseadvysr.com
        ✔ Implement Authetication @created(20-08-02 19:11) @done(20-08-02 23:47)

        ✔ Deploy NodeJS + API, look at deploy scripts for easier deployments @created(20-08-02 23:47) @done(20-08-11 11:53)

    ✔ Handle Search Requests @created(20-08-11 11:53) @done(20-08-17 18:37)
        We take a string from the website and parse into SQL to pull the requisite SUBJECT and NUMBER (if its there) or CLASS NAME, deliminated by commas.

        ex. CHM 101, CHM, Chemistry I
            SUB NUM, SUB, Class Name

        SELECT * FROM "public"."courses" WHERE ("meetingdays"::TEXT LIKE '%Monday%') AND ("coursesubject"::TEXT LIKE '%ECO%') OR ("meetingdays"::TEXT LIKE '%Monday%') AND ("coursesubject"::TEXT LIKE '%CSC%') ORDER BY "courseregistrationnumber" LIMIT 150 OFFSET 0;

        ^ meeting at least on mondays (though we should describe whether we want MWF, MW, or just M) and is an ECO or a CSC class

    ✔ Edge Case: Searching for a course with a course number that ends with a 0 does not match and as such does not return anything. @created(20-08-17 19:08) @done(20-08-17 19:16)
    
    - On The issuance of tokens @created(20-08-12 02:48)
        Currently, we are issuing token based on just the time issued and whether
        they are entitled to the credential or not (by verifiing user and password
        match). I'm pretty sure we'll have to store the most recent token issued to a user
        because of the ability to log in multiple times, creating multiple tokens that are all
        legal. I can assume that this could be an issue which would allow multiple machines
        be under the same user which might not be desired. Will look into that.
    
    ☐ Implement a Credentials Refresh @created(20-08-11 12:06)
        Currently, credentials are issued at five minute intervals and after
        we do not reissue credentials which leads to being in a logged out
        state. We should have an endpoint that can be hit to authorize the
        issue of a new credential (in 5m intervals) with the current
        un-expired credential.
    
    ☐ Surface Errors to Web @created(20-08-21 20:46)
        Currently, we do not surface errors and instead just fail silently
        (or fail in the console). This is untenable come a much wider release 
        in the future. We have to build a selection of user readable errors that
        can be sent to the website and shown to the user. Maybe we can send a
        nicely formed error code to describe what happened on our end.

    ✔  Support Course Selections & Storage @created(20-09-04 18:14) @done(20-09-04 22:57)
        We're using a junction table (user_courses) to do so! Maybe we should
        do something better but it seems this is the best possible implementation.
        
        INSERT INTO "public"."user_courses" ("username", "course") VALUES ('jumar', '82584');
        An Example Way of Adding a connection ^
        "username" takes the username of a person, "course" takes the 
        courseregistrationnumber located in the courses table... It's the (hopefully)
        always unique key for each course listed in the catalog.
    
Design:
    ☐ Improve the Design of the actual Table @created(20-08-21 20:58)
        The basic bootstrap design kinda sucks

Database:
    ✔ Make sure that everything that must be unique, is @created(20-08-12 03:08) @done(20-08-17 18:37)

    ✔ Enforce Uniqueness Amogst all Unique Items @created(20-08-21 20:46) @done(20-09-04 18:20)
        This refers to users, for instance. I'm not sure if the database currently
        enforces uniqueness THOUGH this should only be another level of redundancy
        due to the checks when registering for an account should catch to see 
        whether a given username or email is already taken. If, somehow, this
        was not caught by the API, this will help simplify the flow and remove
        collisions from the db.

        “2020-09-04” this was inadvertantly accomplished by implementing the 
        backing to course selections in the user_courses junction table.
    ☐ Create an UPDATE func when we update the db with new course information @created(20-09-04 18:34)
        Course locations, mostly, change so much leaving our information very stale.
        Currently, there is only an INSERT being called, not 
Web:
    ☐ Display Errors from API @created(20-08-21 20:48)
        See: Surface Errors to Web in "API"
        The UX of Courseadvysr leaves much to be desired. We currently fail
        silently and that isn't good for the end user who might not understand
        that their request may be malformed. We must surface end-user understandable
        errors to help them navigate the site. Probably modals. 

    ☐ Implement Filtering of Courses based on filterable data @created(20-08-21 20:40)
        We're not surfacing all of the data we have, and we provide _too much_ data to consider.
        This would help make things easier to grok and understand.

        Providing a user with tools to filter out courses based on their times, 
        faculty member, days offered and whatever else would be very nice to have
        and would be better in line with the options OnTrack gives as well.

        As we don't want to needlessly query the db for filtering searches, we
        can instead do it all on device, as the cost of getting all of the CHM 
        or COM courses for instance is negligible... for now at least.
    ☐ Implement Selectors for Selecting Courses @created(20-08-21 20:39)
        With searching done, the next iteration is to allow for pepole to select
        courses from the surfaced courses.
    
    ✔ Implement Search Bar @created(20-08-11 11:53) @done(20-08-17 18:37)
        Implement a Search bar, then wire it up

        This will require rewriting the current get request to get 

    ☐ Implement a periodical credentials refresh @created(20-08-11 12:08)
        See "Implement a Credentials Refresh" in API. If we were not to do this
        people would be erroneously logged out while using the application.

    ☐ Create Filtering Protocols @created(20-08-17 19:09)
        Taken from "Handle Search Requests" in "API"
        SELECT * FROM "public"."courses" WHERE ("meetingdays"::TEXT LIKE '%Monday%') AND ("coursesubject"::TEXT LIKE '%ECO%') OR ("meetingdays"::TEXT LIKE '%Monday%') AND ("coursesubject"::TEXT LIKE '%CSC%') ORDER BY "courseregistrationnumber" LIMIT 150 OFFSET 0;

        ^ meeting at least on mondays (though we should describe whether we want MWF, MW, or just M) and is an ECO or a CSC class